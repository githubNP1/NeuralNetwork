package bot;

//multiplies inputs and decides whether even or odd, {1,0} - even, {0,1} - odd

import java.util.*;
import javax.swing.*;

public class Neural2{  
    double errorTotal, learningRate = 0.1;
    double[] input = new double[2], target = new double[2];
    double[][] layers = new double[4][2], biases = new double[3][2], biasChanges = new double[3][2];
    double[][][] weights = new double[3][2][2], weightChanges = new double[3][2][2];
    
    ArrayList<double[]> inputs = new ArrayList<>();
    Random rand = new Random();
    ArrayList<Double> errors = new ArrayList<>();
    
    public Neural2(){
        createInputData();
        createWeightsAndBiases();
        inputs.forEach((input) -> {
            this.input = input;
            createTargets();
            forwardPropagation();
            printInfo();
            findErrorTotal();
            backPropagation();
            updateWeightsAndBiases();
        });
    }
    
    public void printInfo(){
        System.out.println("inputs: " + input[0] + ", " + input[1]);
        System.out.println("weights[0][0]: " + weights[0][0][0] + ", " + weights[0][0][1]);
        System.out.println("weights[0][1]: " + weights[0][1][0] + ", " + weights[0][1][1]);
        System.out.println("biases[0]: " + biases[0][0] + ", " + biases[0][1]);
        System.out.println("layers[1]: " + layers[1][0] + ", " + layers[1][1]);
        
        System.out.println("weights[1][0]: " + weights[1][0][0] + ", " + weights[1][0][1]);
        System.out.println("weights[1][1]: " + weights[1][1][0] + ", " + weights[1][1][1]);
        System.out.println("biases[1]: " + biases[1][0] + ", " + biases[1][1]);
        System.out.println("layers[2]: " + layers[2][0] + ", " + layers[2][1]);
        
        System.out.println("weights[2][0]: " + weights[2][0][0] + ", " + weights[2][0][1]);
        System.out.println("weights[2][1]: " + weights[2][1][0] + ", " + weights[2][1][1]);
        System.out.println("biases[2]: " + biases[2][0] + ", " + biases[2][1]);
        System.out.println("layers[3]: " + layers[3][0] + ", " + layers[3][1]);
        
        System.out.println("target: " + target[0] + ", " + target[1]);
    }
    
    public void updateWeightsAndBiases(){
        for(int i = 0; i < weights.length; i++){
            for(int j = 0; j < weights[i].length; j++){
                for(int k = 0; k < weights[i][j].length; k++){
                    weights[i][j][k] -= learningRate * weightChanges[i][j][k];
                }
            }
        }
        for(int i = 0; i < biases.length; i++){
            for(int j = 0; j < biases[i].length; j++){
                biases[i][j] -= learningRate * biasChanges[i][j];
            }
        }
    }
    
    public void backPropagation(){
        for(int i = 0; i < weightChanges[2].length; i++){
            for(int j = 0; j < weightChanges[2][i].length; j++){
                weightChanges[2][i][j] = getErrorOverOutputDerivative(j) * sigmoidDerivative(layers[3][j]) * layers[2][i];
            }
        }
        for(int i = 0; i < biasChanges[2].length; i++){
            biasChanges[2][i] = getErrorOverOutputDerivative(i) * sigmoidDerivative(layers[3][i]);
        }
        for(int i = 0; i < weightChanges[1].length; i++){
            for(int j = 0; j < weightChanges[1][i].length; j++){
                weightChanges[1][i][j] = 0;
                for(int k = 0; k < layers[3].length; k++){
                    weightChanges[1][i][j] += getErrorOverOutputDerivative(k) * sigmoidDerivative(layers[3][k]) * weights[2][j][k] * layers[1][i] * sigmoidDerivative(layers[2][j]);
                }
            }
        }
        for(int i = 0; i < biasChanges[1].length; i++){
            biasChanges[1][i] = 0;
            for(int j = 0; j < layers[3].length; j++){
                biasChanges[1][i] += getErrorOverOutputDerivative(j) * sigmoidDerivative(layers[3][j]) * weights[2][i][j] * sigmoidDerivative(layers[2][i]);
            }
        }
        for(int i = 0; i < weightChanges[0].length; i++){
            for(int j = 0; j < weightChanges[0][i].length; j++){
                weightChanges[0][i][j] = 0;
                for(int k = 0; k < layers[2].length; k++){
                    for(int l = 0; l < layers[3].length; l++){
                        weightChanges[0][i][j] += getErrorOverOutputDerivative(l) * sigmoidDerivative(layers[3][l]) * weights[2][k][l] * sigmoidDerivative(layers[2][k]) * weights[1][j][k] * sigmoidDerivative(layers[1][j]) * layers[0][i];
                    }
                }
            }
        }
        for(int i = 0; i < biasChanges[0].length; i++){
            biasChanges[0][i] = 0;
            for(int j = 0; j < layers[2].length; j++){
                for(int k = 0; k < layers[3].length; k++){
                    biasChanges[0][i] += getErrorOverOutputDerivative(k) * sigmoidDerivative(layers[3][k]) * weights[2][j][k] * sigmoidDerivative(layers[2][j]) * weights[1][i][j] * sigmoidDerivative(layers[1][i]);
                }
            }
        }
    }
    
    public double getErrorOverOutputDerivative(int index){
        return layers[3][index] - target[index];
    }
    
    public double sigmoidDerivative(double d){
        return d * (1 - d);
    }
    
    public void findErrorTotal(){
        errorTotal = 0; 
        for(int i = 0; i < layers[3].length; i++){
            errorTotal += Math.pow(target[i] - layers[3][i], 2);
        }
        errorTotal /= 2;
        System.out.println(errorTotal);
    }
    
    public void forwardPropagation(){
        layers[0] = input;
        for(int i = 1; i < layers.length; i++){
            for(int j = 0; j < layers[i].length; j++){
                layers[i][j] = biases[i - 1][j];
                for(int k = 0; k < layers[i - 1].length; k++){
                    layers[i][j] += layers[i - 1][k] * weights[i - 1][k][j];
                }
                layers[i][j] = sigmoidFunction(layers[i][j]);
            }
        }
    }
    
    public Double sigmoidFunction(Double d){
        return 1 / (1 + Math.exp(-d));
    }
    
    public void createTargets(){
        if((input[0] * input[1]) % 2 == 0){
            target[0] = 1;
            target[1] = 0;
        }
        else{
            target[0] = 0;
            target[1] = 1;
        }
    }
    
    public void createInputData(){
        for(int i = 0; i < 100000; i++){
            double[] input = new double[2];
            for(int j = 0; j < input.length; j++){
                input[j] = rand.nextInt(10) + 1; 
            }
            inputs.add(input);
        }
    }
    
    public void createWeightsAndBiases(){
        for(int i = 0; i < weights.length; i++){
            for(int j = 0; j < weights[i].length; j++){
                for(int k = 0; k < weights[i][j].length; k++){
                    weights[i][j][k] = rand.nextInt(3);
                }
            }
        }
        for(int i = 0; i < biases.length; i++){
            for(int j = 0; j < biases[i].length; j++){
                biases[i][j] = rand.nextInt(3);
            }
        }
    }
    
    public static void main(String[] args){
        new Neural2();
    }
}
